int IntcInitFunction(u16 DeviceId, XScuTimer *TimerInstancePtr1)
{
    XScuGic_Config *IntcConfig;

    IntcConfig = XScuGic_LookupConfig(DeviceId);
    XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);

    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);

    XScuGic_Connect(&INTCInst, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)timer1_interrupt_handler, (void *) TimerInstancePtr1);

    XScuTimer_EnableInterrupt(TimerInstancePtr1);

    XScuGic_Enable(&INTCInst, XPAR_SCUTIMER_INTR);

    Xil_ExceptionInit();
    Xil_ExceptionEnable();

    XScuTimer_LoadTimer(TimerInstancePtr1, TIMER_LOAD_VALUE);
    XScuTimer_EnableAutoReload(TimerInstancePtr1);
    XScuTimer_Start(TimerInstancePtr1);
}

static void timer1_interrupt_handler(void *CallBackRef)
{
    XScuTimer *my_Timer_LOCAL = (XScuTimer *) CallBackRef;

    if (XScuTimer_IsExpired(&Timer))
    {
        XScuTimer_ClearInterruptStatus(my_Timer_LOCAL);

        if (rgb_state == 0) {
            // Set RGB to Red
            XGpio_DiscreteWrite(GPIOInstancePtr, 1, 0x09);
            rgb_state++;
        } else if (rgb_state == 1) {
            // Set RGB to Green
            XGpio_DiscreteWrite(GPIOInstancePtr, 1, 0x24);
            rgb_state++;
        } else {
            // Set RGB to Blue
            XGpio_DiscreteWrite(GPIOInstancePtr, 1, 0x12);
            rgb_state = 0;
        }
    }
}
